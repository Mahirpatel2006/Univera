generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  clerkId      String        @unique
  createdAt    DateTime      @default(now())
  chatMessages ChatMessage[]
  student      Student?
  forums       Forum[]
  Role         Role[]        @relation("UserRoles")
}

model Forum {
  id           Int           @id @default(autoincrement())
  name         String
  departmentId Int
  courseId     Int
  year         Int
  userId       String
  status       String
  createdAt    DateTime      @default(now())
  chatMessages ChatMessage[]
  Course       Course        @relation(fields: [courseId], references: [id])
  Department   Department    @relation(fields: [departmentId], references: [id])
  user         User          @relation(fields: [userId], references: [clerkId])
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  message   String
  userId    String
  forumId   Int
  createdAt DateTime @default(now())
  forum     Forum    @relation(fields: [forumId], references: [id])
  user      User     @relation(fields: [userId], references: [clerkId])
}

model Course {
  id           Int        @id @default(autoincrement())
  name         String
  code         String     @unique
  credits      Int
  departmentId Int
  universityId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime
  Department   Department @relation(fields: [departmentId], references: [id])
  University   University @relation(fields: [universityId], references: [id])
  Faculty      Faculty[]
  Forum        Forum[]
  Student      Student[]
}

model Department {
  id           Int        @id @default(autoincrement())
  name         String
  code         String     @unique
  universityId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime
  Course       Course[]
  University   University @relation(fields: [universityId], references: [id])
  Faculty      Faculty[]
  Forum        Forum[]
  Student      Student[]
}

model Faculty {
  id           String     @id @unique
  name         String
  email        String     @unique
  phone        String?
  departmentId Int
  clerkId      String     @unique
  courseId     Int
  universityId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime
  Course       Course     @relation(fields: [courseId], references: [id])
  Department   Department @relation(fields: [departmentId], references: [id])
  University   University @relation(fields: [universityId], references: [id])
}

model Role {
  id       Int    @id @default(autoincrement())
  rolename String
  User     User[] @relation("UserRoles")
}

model Student {
  id           String     @id @unique
  name         String
  email        String     @unique
  phone        String?
  year         Int
  departmentId Int
  universityId Int
  courseId     Int
  clerkId      String     @unique
  userId       String     @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime
  user         User       @relation(fields: [userId], references: [id])
  Course       Course     @relation(fields: [courseId], references: [id])
  Department   Department @relation(fields: [departmentId], references: [id])
  University   University @relation(fields: [universityId], references: [id])
}

model University {
  id          Int          @id @default(autoincrement())
  name        String
  location    String
  established Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  Course      Course[]
  Department  Department[]
  Faculty     Faculty[]
  Student     Student[]
}
