generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int      @id @default(autoincrement())
  rolename  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  users     User[]   @relation("UserToRole")
}

model User {
  id           String  @id @default(uuid())
  email        String  @unique
  name         String
  phone        String?
  address      String?
  clerkId      String  @unique
  gender       String?
  dob          String?
  birthPlace   String?
  departmentId Int?

  roles               Role[]         @relation("UserToRole")
  chatMessage         ChatMessage[]
  course              Course?
  departmentAdmin     Department?    @relation("AdminToDepartment")
  departmentPrincipal Department?    @relation("PrincipalToDepartment")
  departmentDean      Department?    @relation("DeanToDepartment")
  event               Event[]
  faculty             Faculty?
  announcement        Announcement[]
  forumStudent        Forum[]        @relation("UserToForum")

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  forumParticipant ForumParticipant[]
  nonTeachingStaff NonTeachingStaff?
  student          Student?
  university       University?

  Department Department? @relation(fields: [departmentId], references: [id])
}

model University {
  id               Int                @id @default(autoincrement())
  name             String
  location         String
  adminId          String             @unique
  established      Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  announcement     Announcement[]
  assignment       Assignment[]
  attendance       Attendance[]
  courses          Course[]
  departments      Department[]
  event            Event[]
  exam             Exam[]
  faculties        Faculty[]
  nonTeachingStaff NonTeachingStaff[]
  result           Result[]
  students         Student[]
  subjects         Subject[]
  admin            User               @relation(fields: [adminId], references: [id])
}

model NonTeachingStaff {
  id           Int        @id @unique
  userId       String     @unique
  experience   Int
  documents    Json[]
  departmentId Int
  universityId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  department   Department @relation(fields: [departmentId], references: [id])
  university   University @relation(fields: [universityId], references: [id])
  user         User       @relation(fields: [userId], references: [clerkId])
}

model Faculty {
  id             String       @id @unique
  achievements   Json[]
  documents      Json[]
  position       String?
  departmentId   Int
  clerkId        String       @unique
  courseId       Int
  universityId   Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  Assignment     Assignment[]
  attendance     Attendance[]
  user           User         @relation(fields: [clerkId], references: [clerkId])
  course         Course       @relation(fields: [courseId], references: [id])
  department     Department   @relation(fields: [departmentId], references: [id])
  university     University   @relation(fields: [universityId], references: [id])
  forumModerator Forum[]
  students       Student[]
  timeTable      TimeTable[]  @relation("FacultyToAttendance")
  proxyTimeTable TimeTable[]  @relation("ProxyToAttendance")
  subject        Subject[]    @relation("faculty_to_Subject")
}

model Student {
  id            String       @id @unique
  prn           String?
  year          Int
  semister      Int
  guardianEmail String?
  gaurdianPhone String?
  rollNo        Int
  documents     Json[]
  mentorId      String?
  departmentId  Int
  universityId  Int
  courseId      Int
  clerkId       String       @unique
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  attendance    Attendance[]
  user          User         @relation(fields: [clerkId], references: [clerkId])
  course        Course       @relation(fields: [courseId], references: [id])
  department    Department   @relation(fields: [departmentId], references: [id])
  mentor        Faculty?     @relation(fields: [mentorId], references: [id])
  university    University   @relation(fields: [universityId], references: [id])
  submissions   Submission[]
}

model Department {
  id               Int                @id @unique @default(autoincrement())
  name             String
  code             String             @unique
  principalId      String?            @unique
  deanId           String?            @unique
  universityId     Int
  adminId          String?            @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  announcement     Announcement[]
  assignment       Assignment[]
  attendance       Attendance[]
  courses          Course[]
  admin            User?              @relation("AdminToDepartment", fields: [adminId], references: [clerkId])
  principal        User?              @relation("PrincipalToDepartment", fields: [principalId], references: [clerkId])
  Dean             User?              @relation("DeanToDepartment", fields: [deanId], references: [clerkId])
  university       University         @relation(fields: [universityId], references: [id])
  event            Event[]
  exam             Exam[]
  faculties        Faculty[]
  forums           Forum[]
  nonTeachingStaff NonTeachingStaff[]
  result           Result[]
  students         Student[]
  subjects         Subject[]
  timeTable        TimeTable[]
  User             User[]
}

model Course {
  id            Int            @id @unique @default(autoincrement())
  name          String
  code          String         @unique
  departmentId  Int
  universityId  Int
  hodId         String?        @unique
  totalSemister Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  announcement  Announcement[]
  assignment    Assignment[]
  attendance    Attendance[]
  department    Department     @relation(fields: [departmentId], references: [id])
  hod           User?          @relation(fields: [hodId], references: [clerkId])
  university    University     @relation(fields: [universityId], references: [id])
  exam          Exam[]
  faculties     Faculty[]
  forums        Forum[]
  result        Result[]
  students      Student[]
  subjects      Subject[]
  timeTable     TimeTable[]
}

model Subject {
  id           Int          @id @unique @default(autoincrement())
  name         String
  credits      Int
  semester     Int
  code         String
  courseId     Int
  departmentId Int
  universityId Int
  resultId     Int?
  syllabus     Json[] //{title,link}
  forumTags    String[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  assignment   Assignment[]
  attendance   Attendance[]
  forums       Forum[]
  course       Course       @relation(fields: [courseId], references: [id])
  department   Department   @relation(fields: [departmentId], references: [id])
  result       Result?      @relation(fields: [resultId], references: [id])
  university   University   @relation(fields: [universityId], references: [id])
  timeTable    TimeTable[]
  faculties    Faculty[]    @relation("faculty_to_Subject")
}

model Attendance {
  id           Int        @id @unique @default(autoincrement())
  rollNo       Int
  studentId    String
  facultyId    String
  semister     Int
  date         DateTime
  status       String
  subjectId    Int
  courseId     Int
  departmentId Int
  universityId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  course       Course     @relation(fields: [courseId], references: [id])
  department   Department @relation(fields: [departmentId], references: [id])
  faculty      Faculty    @relation(fields: [facultyId], references: [clerkId])
  student      Student    @relation(fields: [studentId], references: [clerkId])
  subject      Subject    @relation(fields: [subjectId], references: [id])
  university   University @relation(fields: [universityId], references: [id])
}

model Submission {
  id           Int        @id @unique @default(autoincrement())
  studentId    String
  assignmentId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  student      Student    @relation(fields: [studentId], references: [clerkId])
}

model Assignment {
  id             Int          @id @unique @default(autoincrement())
  title          String
  deadline       DateTime     @default(now())
  attachmentUrl  String
  assignmentType String       @default("tutorial")
  subjectId      Int
  facultyId      String
  courseId       Int
  departmentId   Int
  universityId   Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  course         Course       @relation(fields: [courseId], references: [id])
  department     Department   @relation(fields: [departmentId], references: [id])
  faculty        Faculty      @relation(fields: [facultyId], references: [id])
  subject        Subject      @relation(fields: [subjectId], references: [id])
  university     University   @relation(fields: [universityId], references: [id])
  submissions    Submission[]
}

model Result {
  id            Int        @id @unique @default(autoincrement())
  prn           String
  rollNo        Int
  totalMarks    Int
  obtainedMarks Int
  egp           Int
  CGPA          Int
  SGPA          Int
  departmentId  Int
  universityId  Int
  courseId      Int
  examId        Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now())
  course        Course     @relation(fields: [courseId], references: [id])
  department    Department @relation(fields: [departmentId], references: [id])
  exam          Exam       @relation(fields: [examId], references: [id])
  university    University @relation(fields: [universityId], references: [id])
  subjects      Subject[]
}

model Exam {
  id           Int        @id @unique @default(autoincrement())
  name         String
  semester     Int
  timeTable    String
  startDate    DateTime?
  endDate      DateTime?
  courseId     Int
  departmentId Int
  universityId Int
  syllabus     Int[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  course       Course     @relation(fields: [courseId], references: [id])
  department   Department @relation(fields: [departmentId], references: [id])
  university   University @relation(fields: [universityId], references: [id])
  result       Result[]
}

model ChatMessage {
  id            Int      @id @default(autoincrement())
  message       String
  userId        String
  forumId       Int
  attachmentUrl Json[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  Forum         Forum    @relation(fields: [forumId], references: [id])
  user          User     @relation(fields: [userId], references: [clerkId])
}

model ForumParticipant {
  id        Int      @id @default(autoincrement())
  userId    String
  forumId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  forum     Forum    @relation(fields: [forumId], references: [id])
  user      User     @relation(fields: [userId], references: [clerkId])
}

model Forum {
  id               Int                @id @default(autoincrement())
  name             String
  userId           String
  status           String
  departmentId     Int
  courseId         Int
  subjectId        Int
  moderatorId      String
  isPrivate        Boolean
  forumTags        String[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  ChatMessage      ChatMessage[]
  course           Course             @relation(fields: [courseId], references: [id])
  department       Department         @relation(fields: [departmentId], references: [id])
  moderator        Faculty            @relation(fields: [moderatorId], references: [id])
  subject          Subject            @relation(fields: [subjectId], references: [id])
  user             User               @relation("UserToForum", fields: [userId], references: [clerkId])
  ForumParticipant ForumParticipant[]
}

model Announcement {
  id           Int        @id @default(autoincrement())
  title        String?
  deccription  String
  date         DateTime   @default(now())
  attachments  Json[]
  announcerId  String
  courseId     Int
  departmentId Int
  universityId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  announcer    User       @relation(fields: [announcerId], references: [clerkId])
  course       Course     @relation(fields: [courseId], references: [id])
  department   Department @relation(fields: [departmentId], references: [id])
  university   University @relation(fields: [universityId], references: [id])
}

model TimeTable {
  id           Int        @id @default(autoincrement())
  day          String
  fromTime     String
  toTime       String
  subjectId    Int
  courseId     Int
  departmentId Int
  facultyId    String
  lecturerId   String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  course       Course     @relation(fields: [courseId], references: [id])
  department   Department @relation(fields: [departmentId], references: [id])
  facuty       Faculty    @relation("FacultyToAttendance", fields: [facultyId], references: [clerkId])
  lecturer     Faculty?   @relation("ProxyToAttendance", fields: [lecturerId], references: [clerkId])
  subject      Subject    @relation(fields: [subjectId], references: [id])
}

model Event {
  id           Int         @id @default(autoincrement())
  date         DateTime    @default(now())
  description  String
  type         String
  budget       Int
  organiserId  String
  universityId Int
  departmentId Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())
  department   Department? @relation(fields: [departmentId], references: [id])
  organiser    User        @relation(fields: [organiserId], references: [clerkId])
  university   University  @relation(fields: [universityId], references: [id])
}
